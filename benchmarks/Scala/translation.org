* Translation Notes

** Direct Translation
  
Direct, 1-1 Translation을 하면서 생겼던 애로사항들

*** constructor에서 this를 참조해야 하는 경우

이거를 옮길 때:
    
#+begin_src java
  public DynamicArray(final int capacity) {
      this.size = 0;
      this.capacity = capacity;
      this.elements = new Object[this.capacity];
  }
  
  /** No-args constructor */
  public DynamicArray() {
      this.size = 0;
      this.capacity = 10;
      this.elements = new Object[this.capacity];
  }
#+end_src

이렇게 하면 안 된다:

#+begin_src scala
  def this(capacity: Int) = this(capacity, 0, new Array(this.capacity))

  def this() = this(10, 0, new Array(this.capacity))
#+end_src

왜냐하면, ~this.capacity~ 를 쓰면 안 되기 때문이다. ~this can be used only in a class, object, or template~ 때문이란다. 그럼 어떻게 하느냐...?

그냥 이렇게 같은 값을 수동으로 전달해 주는 수밖에 없다.

#+begin_src scala
def this(capacity: Int) = this(capacity, 0, new Array(capacity))

def this() = this(10, 0, new Array(10))
#+end_src

*** Type Parameter의 범위를 지정하고 싶은데 그게 안됨

참고: [[https://www.baeldung.com/wp-content/uploads/sites/3/2020/08/Scala_type_hierarchy-1-768x644-1.png][Scala Type hierarchy]]

이렇게 되어 있는 걸,

#+begin_src java
public class DynamicArray<E> implements Iterable<E> {
#+end_src

이렇게 바꿨더니:

#+begin_src scala
  class DynamicArray[E](private var capacity: Int,
                      private var size: Int,
                      private var elements: Array[AnyRef]) extends Iterable[E] {
#+end_src

여기서:

#+begin_src scala
    def add(element: E): Unit = {
    if (size == elements.length)
      this.elements = Arrays.copyOf(elements, newCapacity())

    this.elements(this.size) = element
    size += 1
  }
#+end_src

#+begin_src
DynamicArray.scala:27: error: type mismatch;
 found   : E
 required: AnyRef
Note that E is unbounded, which means AnyRef is not a known parent.
Such types can participate in value classes, but instances
cannot appear in singleton types or in reference comparisons.
    this.elements(this.size) = element
                               ^
#+end_src

이런 오류가 난다. 그럼 Array[E <: AnyRef] 라고 하면 되지 않느냐? 그건 신택스 오류이다.

**** 해결책

#+begin_src scala
  def add[E <: AnyRef](element: E): Unit = {
    if (size == elements.length)
      this.elements = Arrays.copyOf(elements, newCapacity())
  
    this.elements(this.size) = element
    size += 1
  }
#+end_src

이렇게 문제가 되는 *메소드에서* contraint를 걸어주면 된다.

*** Namespace::methodIdentifier Syntax를 못 쓴다

 #+begin_src java
   @Override
   public String toString() {
       return Arrays.toString(Arrays.stream(this.elements).filter(Objects::nonNull).toArray());
   }
 #+end_src

여기서 point-free 스타일로 쓰인 Objects:nonNull을 그대로 가져다 쓰면 안 된다. 왜냐하면, Scala에서 (::)는 List cons function이기 때문이다.

**** 해결책

쉽다. 그냥 Objects.nonNull을 해 주면 된다.

*** 모든 class attribute는 var로

#+begin_src scala
  private class DynamicArrayIterator extends Iterator[E] {
    private val cursor: Int
#+end_src

이렇게 하지 마시고요

#+begin_src scala
  private class DynamicArrayIterator extends Iterator[E] {
    private var cursor: Int = _
#+end_src

이렇게 하세요.

*** withFilter is not a member of ...

#+begin_src scala
  var names: DynamicArray[String] = new DynamicArray()
  names.add("Peubes")
  names.add("Marley")
  
  for (name: String <- names)
    println(name)
#+end_src

이렇게 되어 있는데, for expression에서 문제가 난다: ~value withFilter is not a member of DataStructures.DynamicArray.DynamicArray[String]~ 라고 한다.

이건 딱히 workaround를 못 찾았다. 그래서 그냥 forEach로 때우고 있다.

workaround를 찾았다. [[https://www.scala-lang.org/api/2.13.3/scala/jdk/CollectionConverters$.html][여기 참조]]
...를 해도 되는데,

**** 해결책

그냥 scala.collection.mutable.ListBuffer를 Java ArrayList 대신 쓰면 된다. for-comprehension도 잘 작동한다.

*** toString은 override를 꼭 붙이자.

+자세한 설명은 생략한다.+ Any의 toString을 override하게 되기 때문이다.

*** break statement

Java에서의 break statement를 쓰기 위해서는 다음과 같은 약간의 삽질이 필요하다:

다음과 같은 for loop을 옮기기 위해서는:

#+begin_src java
  for (int x = 0; i < 10; i++) {
        if (x == 5)
            break
        System.out.println(x)
  }  
#+end_src

다음과 같이 import를 하고, breakable 선언을 해 줘야 한다:

#+begin_src amm
  import scala.util.control.Breaks._
  
  breakable {
    for(x <- 0 to 9) {
      if (x == 5)
        break
      println(x)
    }
  }
#+end_src

#+RESULTS:
: 0
: 1
: 2
: 3
: 4
: import scala.util.control.Breaks._

됐쥬?

*** App trait를 extend한다면, def main()을 할 필요가 없다.

오히려 이렇게 하면 안 된다. 이러면 override하게 되기 때문이다. 그냥 object Main extends App { ... } 안에 main이 들어갈 내용을 써 주기만 하면 된다.

*** Multidimensional Array 크기만 주고 선언하기

(nodes * nodes) 크기의 2D 배열을 선언하기 위해서는, 다음과 같이 하면 안 된다:
    
#+begin_src scala
  adjacencyMatrix = new Array[Array[Int]](nodes)(nodes)
#+end_src

이거는 왜인지는 모르겠는데, type mismatch가 터진다. Type mismatch를 피하기 위해선:

#+begin_src scala
  adjacencyMatrix = Array.ofDim[Int](nodes, nodes)
#+end_src

이렇게 해 줘야 한다.

** Functional Implementation

드디어...!! 제일 중요한 이걸 하게 되는군...!!!


